import streamlit as st
import plotly.express as px
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import silhouette_score  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è silhouette_score
import pandas as pd
import numpy as np
import scipy.stats as stats

st.set_page_config(page_title="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ üî¨", layout="wide")

def show_correlations(df):
    st.subheader("üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

    if df.empty:
        st.error("DataFrame –ø—É—Å—Ç–æ–π!")
        return

    st.write("–†–∞–∑–º–µ—Ä DataFrame:", df.shape)
    st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
    st.write(df.head())

    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

    st.write(f"üìä –í—Å–µ–≥–æ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: {len(numeric_cols)}")
    if numeric_cols:
        st.write("üîç –ß–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã:", numeric_cols)

    if len(numeric_cols) < 2:
        st.warning("–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        return

    st.sidebar.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
    selected_cols = st.sidebar.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π:",
        numeric_cols,
        default=numeric_cols[:min(10, len(numeric_cols))]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    )

    if len(selected_cols) < 2:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞.")
        return

    analysis_df = df[selected_cols].dropna()

    if len(analysis_df) == 0:
        st.error("–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å!")
        return

    st.write(f"üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(analysis_df)} —Å—Ç—Ä–æ–∫ —Å {len(selected_cols)} —Å—Ç–æ–ª–±—Ü–∞–º–∏")

    corr_matrix = analysis_df.corr()

    fig_heatmap = px.imshow(
        corr_matrix,
        text_auto=".2f",
        color_continuous_scale='RdBu_r',
        zmin=-1,
        zmax=1,
        title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π",
    )
    fig_heatmap.update_layout(width=800, height=600)
    st.plotly_chart(fig_heatmap, use_container_width=True)

    pos_threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏", 0.0, 1.0, 0.6, 0.05)
    neg_threshold = st.sidebar.slider("–ü–æ—Ä–æ–≥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å–≤—è–∑–∏", -1.0, 0.0, -0.6, 0.05)

    strong_pos = []
    strong_neg = []

    for i in range(len(corr_matrix.columns)):
        for j in range(i + 1, len(corr_matrix.columns)):
            val = corr_matrix.iloc[i, j]
            if val >= pos_threshold:
                strong_pos.append((corr_matrix.columns[i], corr_matrix.columns[j], val))
            elif val <= neg_threshold:
                strong_neg.append((corr_matrix.columns[i], corr_matrix.columns[j], val))

    def create_scatter_plot(x_col, y_col, corr_val, correlation_type):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        plot_data = analysis_df[[x_col, y_col]].dropna()

        if len(plot_data) < 2:
            st.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {x_col} vs {y_col}")
            return None

        fig = px.scatter(
            plot_data,
            x=x_col,
            y=y_col,
            title=f"{correlation_type}: {x_col} vs {y_col} (r={corr_val:.2f})",
            trendline="ols",
            template="plotly_white"
        )
        return fig

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
    if strong_pos:
        st.markdown(f"### ‚úÖ –°–∏–ª—å–Ω—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ (r ‚â• {pos_threshold})")
        for x_col, y_col, corr_val in strong_pos:
            st.write(f"**{x_col}** ‚Üî **{y_col}** (r = {corr_val:.3f})")
            fig = create_scatter_plot(x_col, y_col, corr_val, "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å")
            if fig:
                st.plotly_chart(fig, use_container_width=True)
            st.markdown("---")
    else:
        st.info(f"–ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π (r ‚â• {pos_threshold})")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π
    if strong_neg:
        st.markdown(f"### üîª –°–∏–ª—å–Ω—ã–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ (r ‚â§ {neg_threshold})")
        for x_col, y_col, corr_val in strong_neg:
            st.write(f"**{x_col}** ‚Üî **{y_col}** (r = {corr_val:.3f})")
            fig = create_scatter_plot(x_col, y_col, corr_val, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑—å")
            if fig:
                st.plotly_chart(fig, use_container_width=True)
            st.markdown("---")
    else:
        st.info(f"–ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π (r ‚â§ {neg_threshold})")


def show_clustering(df):
    st.subheader("üåÄ –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (KMeans)")

    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    if len(numeric_cols) < 2:
        st.warning("–î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–∞.")
        return

    selected_cols = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏:",
        numeric_cols,
        default=numeric_cols[:2]
    )

    if len(selected_cols) < 2:
        st.warning("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.")
        return

    X = df[selected_cols].dropna()
    if len(X) < 2:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏).")
        return

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    if 'n_clusters' not in st.session_state:
        st.session_state['n_clusters'] = 3

    if st.button("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"):
        max_k = min(10, len(X) - 1)  # –ú–∞–∫—Å–∏–º—É–º k - –Ω–µ –±–æ–ª—å—à–µ, —á–µ–º —Å—Ç—Ä–æ–∫ –º–∏–Ω—É—Å 1
        if max_k < 2:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ k.")
            return

        silhouette_scores = []
        for k in range(2, max_k + 1):
            kmeans = KMeans(n_clusters=k, random_state=42, n_init=10)
            labels = kmeans.fit_predict(X_scaled)
            score = silhouette_score(X_scaled, labels)
            silhouette_scores.append(score)

        optimal_k = range(2, max_k + 1)[np.argmax(silhouette_scores)]
        st.session_state['n_clusters'] = optimal_k
        st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–ø–æ Silhouette score): {optimal_k}")

    n_clusters = st.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (k):",
        min_value=2,
        max_value=10,
        value=st.session_state['n_clusters']
    )

    st.session_state['n_clusters'] = n_clusters

    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    clusters = kmeans.fit_predict(X_scaled)

    df_result = X.copy()
    df_result["Cluster"] = clusters

    st.write("### –¶–µ–Ω—Ç—Ä–æ–∏–¥—ã –∫–ª–∞—Å—Ç–µ—Ä–æ–≤")
    centroids = pd.DataFrame(scaler.inverse_transform(kmeans.cluster_centers_), columns=selected_cols)
    centroids["Cluster"] = range(n_clusters)
    st.dataframe(centroids)

    if len(selected_cols) == 2:
        fig = px.scatter(
            df_result, x=selected_cols[0], y=selected_cols[1],
            color="Cluster", title="–ö–ª–∞—Å—Ç–µ—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            color_continuous_scale="Viridis"
        )
        st.plotly_chart(fig, use_container_width=True)
    else:
        fig = px.scatter_matrix(
            df_result,
            dimensions=selected_cols,
            color="Cluster",
            title="–ö–ª–∞—Å—Ç–µ—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (scatter matrix)"
        )
        st.plotly_chart(fig, use_container_width=True)


def _t_test(df: pd.DataFrame, col_group: str, col_value: str):
    groups = df[col_group].dropna().unique()
    if len(groups) != 2:
        return None, "–î–ª—è t-test –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ 2 –≥—Ä—É–ø–ø—ã (2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ —Å –≥—Ä—É–ø–ø–∞–º–∏)."

    g1, g2 = groups[0], groups[1]
    s1 = df[df[col_group] == g1][col_value].dropna()
    s2 = df[df[col_group] == g2][col_value].dropna()
    if len(s1) < 2 or len(s2) < 2:
        return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø (–Ω—É–∂–Ω–æ >=2)."

    stat, pval = stats.ttest_ind(s1, s2, equal_var=False)
    return {"statistic": stat, "pvalue": pval, "group_names": (g1, g2), "n1": len(s1), "n2": len(s2)}, None


def _chi2(df: pd.DataFrame, col1: str, col2: str):
    contingency = pd.crosstab(df[col1], df[col2])
    if contingency.size == 0:
        return None, "–ö–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è."
    chi2, pval, dof, expected = stats.chi2_contingency(contingency)
    return {"chi2": chi2, "pvalue": pval, "dof": dof, "expected": expected, "contingency": contingency}, None


def _anova(df: pd.DataFrame, col_group: str, col_value: str):
    unique_groups = df[col_group].dropna().unique()
    groups = [df[df[col_group] == g][col_value].dropna() for g in unique_groups]
    if len(groups) < 2:
        return None, "–î–ª—è ANOVA –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≥—Ä—É–ø–ø—ã."
    if any(len(g) < 2 for g in groups):
        return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø (–Ω—É–∂–Ω–æ >=2)."
    stat, pval = stats.f_oneway(*groups)
    return {"F": stat, "pvalue": pval, "groups": unique_groups}, None


def show_stats(df: pd.DataFrame):
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (t-test, œá¬≤, ANOVA)")

    num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ = –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ + —Ü–µ–ª—ã–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    cat_cols = df.select_dtypes(exclude=[np.number]).columns.tolist()
    int_like = [c for c in df.columns if pd.api.types.is_integer_dtype(df[c]) and df[c].nunique() <= 10]
    for c in int_like:
        if c not in cat_cols:
            cat_cols.append(c)

    test = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", ["t-test", "œá¬≤ (—Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç)", "ANOVA"])

    if test == "t-test":
        group_candidates = [c for c in df.columns if df[c].nunique() == 2]
        if not group_candidates:
            st.warning("–ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ —Å —Ä–æ–≤–Ω–æ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≥—Ä—É–ø–ø (–Ω—É–∂–Ω–∞ –±–∏–Ω–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞).")
            return
        col_group = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ (2 —É–Ω–∏–∫—É–º–∞):", group_candidates)
        if not num_cols:
            st.warning("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return
        col_value = st.selectbox("–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ):", num_cols)
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å t-test"):
            res, err = _t_test(df, col_group, col_value)
            if err:
                st.error(err)
            else:
                st.write(f"t = {res['statistic']:.4f}, p = {res['pvalue']:.4f}")
                st.write("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:", "‚úÖ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ (p < 0.05)" if res[
                                                                                                'pvalue'] < 0.05 else "‚ÑπÔ∏è —Ä–∞–∑–ª–∏—á–∏–µ –Ω–µ –∑–Ω–∞—á–∏–º–æ (p >= 0.05)")
                st.write(f"–†–∞–∑–º–µ—Ä—ã –≥—Ä—É–ø–ø: {res['group_names'][0]}: {res['n1']}, {res['group_names'][1]}: {res['n2']}")

                fig = px.box(df, x=col_group, y=col_value, points="all", title=f"{col_value} –ø–æ {col_group}")
                st.plotly_chart(fig, use_container_width=True)

    elif test == "œá¬≤ (—Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç)":
        if len(cat_cols) < 2:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è œá¬≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2).")
            return
        col1 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ 1:", cat_cols, index=0)
        col2 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ 2:", [c for c in cat_cols if c != col1], index=0)
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å œá¬≤"):
            res, err = _chi2(df, col1, col2)
            if err:
                st.error(err)
            else:
                st.write(f"œá¬≤ = {res['chi2']:.4f}, p = {res['pvalue']:.4f}, dof = {res['dof']}")
                st.write("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:",
                         "‚úÖ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏" if res['pvalue'] < 0.05 else "‚ÑπÔ∏è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                st.markdown("**–ö–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:**")
                st.dataframe(res["contingency"])

    elif test == "ANOVA":
        group_candidates = [c for c in df.columns if df[c].nunique() >= 2]
        if not group_candidates or not num_cols:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ –∏ —á–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞).")
            return
        col_group = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞:", group_candidates)
        col_value = st.selectbox("–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞:", num_cols)
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å ANOVA"):
            res, err = _anova(df, col_group, col_value)
            if err:
                st.error(err)
            else:
                st.write(f"F = {res['F']:.4f}, p = {res['pvalue']:.4f}")
                st.write("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:", "‚úÖ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (p < 0.05)" if res[
                                                                                                 'pvalue'] < 0.05 else "‚ÑπÔ∏è —Ä–∞–∑–ª–∏—á–∏—è –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã")
                fig = px.box(df, x=col_group, y=col_value, points="all", title=f"{col_value} –ø–æ {col_group}")
                st.plotly_chart(fig, use_container_width=True)


st.title("üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑")
if 'df' in st.session_state:
    df = st.session_state['df']
    analysis_type = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:",
        ["–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ üìâ", "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è üÜé", "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üßÆ"]
    )
    if analysis_type == "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ üìâ":
        show_correlations(df)
    elif analysis_type == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è üÜé":
        show_clustering(df)
    elif analysis_type == "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ üßÆ":
        show_stats(df)
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
