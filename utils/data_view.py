import streamlit as st
import plotly.express as px
import pandas as pd
from wordcloud import WordCloud
import matplotlib.pyplot as plt


@st.cache_data
def generate_wordcloud(text):
    return WordCloud(width=1200, height=800, background_color="white").generate(text)


def show_data_overview(df):
    st.subheader("üìã –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")

    # –†–∞–∑–º–µ—Ä DataFrame
    st.write("### –†–∞–∑–º–µ—Ä DataFrame:", df.shape)

    # –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—â–∞—è –∏–Ω—Ñ–∞
    st.write("### –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã")
    st.dataframe(df.head())

    st.write("### –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.write(df.describe(include="all"))

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö
    st.write("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö:")
    info_data = []
    for col in df.columns:
        info_data.append({
            '–°—Ç–æ–ª–±–µ—Ü': col,
            '–¢–∏–ø': str(df[col].dtype),
            '–ù–µ-NULL': df[col].count(),
            '–í—Å–µ–≥–æ': len(df),
            '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö': df[col].nunique()
        })
    st.dataframe(pd.DataFrame(info_data))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω–æ
    if 'column_types' not in st.session_state:
        st.session_state.column_types = {}
        for col in df.columns:
            dtype = df[col].dtype
            if pd.api.types.is_numeric_dtype(dtype):
                if pd.api.types.is_integer_dtype(dtype) and df[col].nunique() <= 10:
                    param_type = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π"
                else:
                    param_type = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"
            elif pd.api.types.is_datetime64_any_dtype(dtype):
                param_type = "–í—Ä–µ–º–µ–Ω–Ω–æ–π"
            elif pd.api.types.is_object_dtype(dtype):
                unique_count = df[col].nunique()
                avg_length = df[col].dropna().apply(lambda x: len(str(x))).mean()
                if unique_count <= 10 or avg_length < 20:
                    param_type = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π"
                else:
                    param_type = "–¢–µ–∫—Å—Ç–æ–≤—ã–π"
            else:
                param_type = "–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å"
            st.session_state.column_types[col] = param_type

    # –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –∏—Ö —Ç–∏–ø–æ–≤ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è)
    st.write("### –¢–∏–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    param_types = []
    for col in df.columns:
        param_types.append({
            '–ü–∞—Ä–∞–º–µ—Ç—Ä': col,
            '–¢–∏–ø': st.session_state.column_types[col]
        })
    st.dataframe(pd.DataFrame(param_types))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    numeric_cols = [col for col, col_type in st.session_state.column_types.items() if col_type == "–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"]
    categorical_cols = [col for col, col_type in st.session_state.column_types.items() if col_type == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π" and df[col].nunique() <= 10]
    text_cols = [col for col, col_type in st.session_state.column_types.items() if col_type == "–¢–µ–∫—Å—Ç–æ–≤—ã–π"]
    time_cols = [col for col, col_type in st.session_state.column_types.items() if col_type == "–í—Ä–µ–º–µ–Ω–Ω–æ–π"]

    st.write("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    st.sidebar.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    selected_numeric = st.sidebar.multiselect(
        "–ß–∏—Å–ª–æ–≤—ã–µ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º:", numeric_cols, default=[]
    )
    selected_categorical = st.sidebar.multiselect(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:", categorical_cols, default=[]
    )
    selected_text = st.sidebar.multiselect(
        "–¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–ª—è –æ–±–ª–∞–∫–æ–≤ —Å–ª–æ–≤:", text_cols, default=[]
    )
    selected_time = st.sidebar.multiselect(
        "–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:", time_cols, default=[]
    )

    # –ß–∏—Å–ª–æ–≤—ã–µ ‚Üí –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    if selected_numeric:
        st.markdown("#### –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        for col in selected_numeric:
            st.markdown(f"**–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {col}**")
            group_col = st.selectbox(
                "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É:",
                ["–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"] + categorical_cols,
                index=0,
                key=f"group_col_numeric_{col}"
            )
            group_col = None if group_col == "–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏" else group_col
            fig = px.histogram(
                df, x=col, color=group_col, nbins=20,
                title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col} {f'–ø–æ {group_col}' if group_col else ''}", template="plotly_white"
            )
            st.plotly_chart(fig, use_container_width=True)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ ‚Üí bar –∏–ª–∏ pie
    if selected_categorical:
        st.markdown("#### –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        cat_chart_types = {}
        for col in selected_categorical:
            st.markdown(f"**{col}**")
            group_col = st.selectbox(
                "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É:",
                ["–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"] + [c for c in categorical_cols if c != col],
                index=0,
                key=f"group_col_categorical_{col}"
            )
            group_col = None if group_col == "–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏" else group_col
            chart_type = st.sidebar.radio(
                f"–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {col}",
                options=["bar", "pie"],
                index=0,
                key=f"chart_type_{col}"
            )
            cat_chart_types[col] = chart_type
            if chart_type == "bar":
                if group_col:
                    value_counts = df.groupby([group_col, col]).size().reset_index(name="count")
                    fig = px.bar(
                        value_counts, x=col, y="count", color=group_col,
                        title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col} –ø–æ {group_col}", template="plotly_white"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    value_counts = df[col].value_counts().reset_index()
                    value_counts.columns = [col, "count"]
                    fig = px.bar(
                        value_counts, y=col, x="count", title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}", template="plotly_white"
                    )
                    st.plotly_chart(fig, use_container_width=True)
            else:
                if group_col:
                    for group in df[group_col].dropna().unique():
                        group_df = df[df[group_col] == group]
                        value_counts = group_df[col].value_counts().reset_index()
                        value_counts.columns = [col, "count"]
                        fig = px.pie(
                            value_counts, names=col, values="count",
                            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col} –¥–ª—è {group_col}={group}", template="plotly_white"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                else:
                    value_counts = df[col].value_counts().reset_index()
                    value_counts.columns = [col, "count"]
                    fig = px.pie(
                        value_counts, names=col, values="count", title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}", template="plotly_white"
                    )
                    st.plotly_chart(fig, use_container_width=True)

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ ‚Üí –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤
    if selected_text:
        st.markdown("#### –¢–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        for col in selected_text:
            st.markdown(f"**–û–±–ª–∞–∫–æ —Å–ª–æ–≤: {col}**")
            group_col = st.selectbox(
                "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É:",
                ["–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"] + categorical_cols,
                index=0,
                key=f"group_col_text_{col}"
            )
            group_col = None if group_col == "–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏" else group_col
            if group_col:
                for group in df[group_col].dropna().unique():
                    st.markdown(f"**–û–±–ª–∞–∫–æ —Å–ª–æ–≤: {col} –¥–ª—è {group_col}={group}**")
                    group_text = " ".join(str(val) for val in df[df[group_col] == group][col].dropna())
                    if not group_text.strip():
                        st.warning(f"–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {col} –≤ –≥—Ä—É–ø–ø–µ {group}.")
                        continue
                    wordcloud = generate_wordcloud(group_text)
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.imshow(wordcloud, interpolation="bilinear")
                    ax.axis("off")
                    st.pyplot(fig, use_container_width=False)
            else:
                text = " ".join(str(val) for val in df[col].dropna())
                if not text.strip():
                    st.warning(f"–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç–æ–ª–±—Ü–µ {col}.")
                    continue
                wordcloud = generate_wordcloud(text)
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.imshow(wordcloud, interpolation="bilinear")
                ax.axis("off")
                st.pyplot(fig, use_container_width=False)

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ ‚Üí lineplot –∏–ª–∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
    if selected_time:
        st.markdown("#### –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        time_chart_types = {}
        for col in selected_time:
            st.markdown(f"**{col}**")
            group_col = st.selectbox(
                "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É:",
                ["–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"] + categorical_cols,
                index=0,
                key=f"group_col_time_{col}"
            )
            group_col = None if group_col == "–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏" else group_col
            chart_type = st.sidebar.radio(
                f"–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {col}",
                options=["histogram", "line"],
                index=0,
                key=f"time_chart_type_{col}"
            )
            time_chart_types[col] = chart_type
            if chart_type == "histogram":
                fig = px.histogram(
                    df, x=col, color=group_col,
                    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col} –ø–æ –≤—Ä–µ–º–µ–Ω–∏ {f'–ø–æ {group_col}' if group_col else ''}", template="plotly_white"
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                if numeric_cols:
                    value_col = st.sidebar.selectbox(
                        f"–ß–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ {col}",
                        options=numeric_cols,
                        key=f"time_value_col_{col}"
                    )
                    if group_col:
                        agg_df = df.groupby([col, group_col])[value_col].mean().reset_index()
                        fig = px.line(
                            agg_df, x=col, y=value_col, color=group_col,
                            title=f"–°—Ä–µ–¥–Ω–µ–µ {value_col} –ø–æ {col} –∏ {group_col}", template="plotly_white"
                        )
                    else:
                        agg_df = df.groupby(col)[value_col].mean().reset_index()
                        fig = px.line(
                            agg_df, x=col, y=value_col,
                            title=f"–°—Ä–µ–¥–Ω–µ–µ {value_col} –ø–æ {col}", template="plotly_white"
                        )
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning(f"–î–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ {col} –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü.")