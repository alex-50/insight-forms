import streamlit as st
import plotly.express as px
import pandas as pd


def show_data_overview(df):
    st.subheader("üìã –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")

    st.write("###  –†–∞–∑–º–µ—Ä DataFrame:", df.shape)

    # –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ–±—â–∞—è –∏–Ω—Ñ–∞
    st.write("### –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã")
    st.dataframe(df.head())

    st.write("### –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.write(df.describe(include="all"))

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
    st.write("### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö:")
    info_data = []
    for col in df.columns:
        info_data.append({
            '–°—Ç–æ–ª–±–µ—Ü': col,
            '–¢–∏–ø': str(df[col].dtype),
            '–ù–µ-NULL': df[col].count(),
            '–í—Å–µ–≥–æ': len(df),
            '–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö': df[col].nunique()
        })
    st.dataframe(pd.DataFrame(info_data))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ
    numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()
    categorical_cols = df.select_dtypes(include=['object', 'category']).columns.tolist()

    st.write("### –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö
    st.sidebar.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    selected_numeric = st.sidebar.multiselect(
        "–ß–∏—Å–ª–æ–≤—ã–µ –¥–ª—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º:", numeric_cols, default=[]
    )
    selected_categorical = st.sidebar.multiselect(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤:", categorical_cols, default=[]
    )

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–∞—ë–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    cat_chart_types = {}
    for col in selected_categorical:
        chart_type = st.sidebar.radio(
            f"–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {col}",
            options=["bar", "pie"],
            index=0,
            key=f"chart_type_{col}"
        )
        cat_chart_types[col] = chart_type

    # –ß–∏—Å–ª–æ–≤—ã–µ ‚Üí –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    for col in selected_numeric:
        st.markdown(f"**{col}**")
        fig = px.histogram(df, x=col, nbins=20, title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}", template="plotly_white")
        st.plotly_chart(fig, use_container_width=True)

    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ ‚Üí –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
    for col in selected_categorical:
        st.markdown(f"**{col}**")
        value_counts = df[col].value_counts().reset_index()
        value_counts.columns = [col, "count"]

        if cat_chart_types.get(col) == "bar":
            fig = px.bar(value_counts, y=col, x="count", title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}", template="plotly_white")
        else:
            fig = px.pie(value_counts, names=col, values="count", title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}", template="plotly_white")

        st.plotly_chart(fig, use_container_width=True)
