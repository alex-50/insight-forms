import streamlit as st
import pandas as pd
import numpy as np
import scipy.stats as stats
import plotly.express as px


def _t_test(df: pd.DataFrame, col_group: str, col_value: str):
    groups = df[col_group].dropna().unique()
    if len(groups) != 2:
        return None, "–î–ª—è t-test –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ 2 –≥—Ä—É–ø–ø—ã (2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–æ–Ω–∫–µ —Å –≥—Ä—É–ø–ø–∞–º–∏)."

    g1, g2 = groups[0], groups[1]
    s1 = df[df[col_group] == g1][col_value].dropna()
    s2 = df[df[col_group] == g2][col_value].dropna()
    if len(s1) < 2 or len(s2) < 2:
        return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø (–Ω—É–∂–Ω–æ >=2)."

    stat, pval = stats.ttest_ind(s1, s2, equal_var=False)
    return {"statistic": stat, "pvalue": pval, "group_names": (g1, g2), "n1": len(s1), "n2": len(s2)}, None


def _chi2(df: pd.DataFrame, col1: str, col2: str):
    contingency = pd.crosstab(df[col1], df[col2])
    if contingency.size == 0:
        return None, "–ö–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è."
    chi2, pval, dof, expected = stats.chi2_contingency(contingency)
    return {"chi2": chi2, "pvalue": pval, "dof": dof, "expected": expected, "contingency": contingency}, None


def _anova(df: pd.DataFrame, col_group: str, col_value: str):
    unique_groups = df[col_group].dropna().unique()
    groups = [df[df[col_group] == g][col_value].dropna() for g in unique_groups]
    if len(groups) < 2:
        return None, "–î–ª—è ANOVA –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –≥—Ä—É–ø–ø—ã."
    if any(len(g) < 2 for g in groups):
        return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø (–Ω—É–∂–Ω–æ >=2)."
    stat, pval = stats.f_oneway(*groups)
    return {"F": stat, "pvalue": pval, "groups": unique_groups}, None


def show_stats(df: pd.DataFrame):
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (t-test, œá¬≤, ANOVA)")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
    num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    # –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ ‚Äî –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ + —Ü–µ–ª—ã–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º —á–∏—Å–ª–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    cat_cols = df.select_dtypes(exclude=[np.number]).columns.tolist()
    int_like = [c for c in df.columns if pd.api.types.is_integer_dtype(df[c]) and df[c].nunique() <= 10]
    for c in int_like:
        if c not in cat_cols:
            cat_cols.append(c)

    test = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç:", ["t-test", "œá¬≤ (—Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç)", "ANOVA"])

    if test == "t-test":
        # –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ä–æ–≤–Ω–æ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≥—Ä—É–ø–ø
        group_candidates = [c for c in df.columns if df[c].nunique() == 2]
        if not group_candidates:
            st.warning("–ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ —Å —Ä–æ–≤–Ω–æ 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –≥—Ä—É–ø–ø (–Ω—É–∂–Ω–∞ –±–∏–Ω–∞—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞).")
            return
        col_group = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏ (2 —É–Ω–∏–∫—É–º–∞):", group_candidates)
        if not num_cols:
            st.warning("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return
        col_value = st.selectbox("–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ):", num_cols)
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å t-test"):
            res, err = _t_test(df, col_group, col_value)
            if err:
                st.error(err)
            else:
                st.write(f"t = {res['statistic']:.4f}, p = {res['pvalue']:.4f}")
                st.write("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:", "‚úÖ —Ä–∞–∑–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º–æ (p < 0.05)" if res[
                                                                                                'pvalue'] < 0.05 else "‚ÑπÔ∏è —Ä–∞–∑–ª–∏—á–∏–µ –Ω–µ –∑–Ω–∞—á–∏–º–æ (p >= 0.05)")
                st.write(f"–†–∞–∑–º–µ—Ä—ã –≥—Ä—É–ø–ø: {res['group_names'][0]}: {res['n1']}, {res['group_names'][1]}: {res['n2']}")
                # boxplot
                fig = px.box(df, x=col_group, y=col_value, points="all", title=f"{col_value} –ø–æ {col_group}")
                st.plotly_chart(fig, use_container_width=True)

    elif test == "œá¬≤ (—Ö–∏-–∫–≤–∞–¥—Ä–∞—Ç)":
        if len(cat_cols) < 2:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è œá¬≤ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2).")
            return
        col1 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ 1:", cat_cols, index=0)
        col2 = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ 2:", [c for c in cat_cols if c != col1], index=0)
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å œá¬≤"):
            res, err = _chi2(df, col1, col2)
            if err:
                st.error(err)
            else:
                st.write(f"œá¬≤ = {res['chi2']:.4f}, p = {res['pvalue']:.4f}, dof = {res['dof']}")
                st.write("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:",
                         "‚úÖ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏" if res['pvalue'] < 0.05 else "‚ÑπÔ∏è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")
                st.markdown("**–ö–æ–Ω—Ç–∏–Ω–≥–µ–Ω—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:**")
                st.dataframe(res["contingency"])

    elif test == "ANOVA":
        # –≥—Ä—É–ø–ø–∏—Ä—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –ª—é–±–∞—è —Å >=2 —É–Ω–∏–∫—É–º–æ–≤
        group_candidates = [c for c in df.columns if df[c].nunique() >= 2]
        if not group_candidates or not num_cols:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω—ã –≥—Ä—É–ø–ø–∏—Ä—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞ –∏ —á–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞).")
            return
        col_group = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä—É—é—â–∞—è –∫–æ–ª–æ–Ω–∫–∞:", group_candidates)
        col_value = st.selectbox("–ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞:", num_cols)
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å ANOVA"):
            res, err = _anova(df, col_group, col_value)
            if err:
                st.error(err)
            else:
                st.write(f"F = {res['F']:.4f}, p = {res['pvalue']:.4f}")
                st.write("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:", "‚úÖ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏ (p < 0.05)" if res[
                                                                                                 'pvalue'] < 0.05 else "‚ÑπÔ∏è —Ä–∞–∑–ª–∏—á–∏—è –Ω–µ –≤—ã—è–≤–ª–µ–Ω—ã")
                fig = px.box(df, x=col_group, y=col_value, points="all", title=f"{col_value} –ø–æ {col_group}")
                st.plotly_chart(fig, use_container_width=True)
